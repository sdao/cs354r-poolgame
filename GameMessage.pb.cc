// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GameMessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "GameMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* GameMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameMessage_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* GameMessage_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Vector3f_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Vector3f_reflection_ = NULL;
const ::google::protobuf::Descriptor* BallPositions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BallPositions_reflection_ = NULL;
const ::google::protobuf::Descriptor* Score_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Score_reflection_ = NULL;
const ::google::protobuf::Descriptor* HitInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HitInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* HitInfo_Strength_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_GameMessage_2eproto() {
  protobuf_AddDesc_GameMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "GameMessage.proto");
  GOOGLE_CHECK(file != NULL);
  GameMessage_descriptor_ = file->message_type(0);
  static const int GameMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameMessage, ball_positions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameMessage, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameMessage, cienthit_),
  };
  GameMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameMessage_descriptor_,
      GameMessage::default_instance_,
      GameMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameMessage));
  GameMessage_Type_descriptor_ = GameMessage_descriptor_->enum_type(0);
  Vector3f_descriptor_ = file->message_type(1);
  static const int Vector3f_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3f, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3f, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3f, z_),
  };
  Vector3f_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Vector3f_descriptor_,
      Vector3f::default_instance_,
      Vector3f_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3f, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3f, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Vector3f));
  BallPositions_descriptor_ = file->message_type(2);
  static const int BallPositions_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallPositions, balls_),
  };
  BallPositions_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BallPositions_descriptor_,
      BallPositions::default_instance_,
      BallPositions_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallPositions, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallPositions, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BallPositions));
  Score_descriptor_ = file->message_type(3);
  static const int Score_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Score, host_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Score, client_score_),
  };
  Score_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Score_descriptor_,
      Score::default_instance_,
      Score_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Score, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Score, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Score));
  HitInfo_descriptor_ = file->message_type(4);
  static const int HitInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HitInfo, strength_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HitInfo, direction_),
  };
  HitInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HitInfo_descriptor_,
      HitInfo::default_instance_,
      HitInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HitInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HitInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HitInfo));
  HitInfo_Strength_descriptor_ = HitInfo_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_GameMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameMessage_descriptor_, &GameMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Vector3f_descriptor_, &Vector3f::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BallPositions_descriptor_, &BallPositions::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Score_descriptor_, &Score::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HitInfo_descriptor_, &HitInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_GameMessage_2eproto() {
  delete GameMessage::default_instance_;
  delete GameMessage_reflection_;
  delete Vector3f::default_instance_;
  delete Vector3f_reflection_;
  delete BallPositions::default_instance_;
  delete BallPositions_reflection_;
  delete Score::default_instance_;
  delete Score_reflection_;
  delete HitInfo::default_instance_;
  delete HitInfo_reflection_;
}

void protobuf_AddDesc_GameMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021GameMessage.proto\"\273\001\n\013GameMessage\022&\n\016b"
    "all_positions\030\001 \001(\0132\016.BallPositions\022\025\n\005s"
    "core\030\002 \001(\0132\006.Score\022\032\n\010cientHit\030\003 \001(\0132\010.H"
    "itInfo\"Q\n\004Type\022\022\n\016BALL_POSITIONS\020\001\022\t\n\005SC"
    "ORE\020\002\022\032\n\026SERVER_RELEASE_CONTROL\020\003\022\016\n\nCLI"
    "ENT_HIT\020\004\"+\n\010Vector3f\022\t\n\001x\030\001 \002(\002\022\t\n\001y\030\002 "
    "\002(\002\022\t\n\001z\030\003 \002(\002\")\n\rBallPositions\022\030\n\005balls"
    "\030\001 \003(\0132\t.Vector3f\"1\n\005Score\022\022\n\nhost_score"
    "\030\001 \002(\002\022\024\n\014client_score\030\002 \002(\002\"w\n\007HitInfo\022"
    "#\n\010strength\030\001 \002(\0162\021.HitInfo.Strength\022\034\n\t"
    "direction\030\002 \002(\0132\t.Vector3f\")\n\010Strength\022\007"
    "\n\003LOW\020\001\022\n\n\006MEDIUM\020\002\022\010\n\004HIGH\020\003", 469);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "GameMessage.proto", &protobuf_RegisterTypes);
  GameMessage::default_instance_ = new GameMessage();
  Vector3f::default_instance_ = new Vector3f();
  BallPositions::default_instance_ = new BallPositions();
  Score::default_instance_ = new Score();
  HitInfo::default_instance_ = new HitInfo();
  GameMessage::default_instance_->InitAsDefaultInstance();
  Vector3f::default_instance_->InitAsDefaultInstance();
  BallPositions::default_instance_->InitAsDefaultInstance();
  Score::default_instance_->InitAsDefaultInstance();
  HitInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_GameMessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_GameMessage_2eproto {
  StaticDescriptorInitializer_GameMessage_2eproto() {
    protobuf_AddDesc_GameMessage_2eproto();
  }
} static_descriptor_initializer_GameMessage_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* GameMessage_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameMessage_Type_descriptor_;
}
bool GameMessage_Type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const GameMessage_Type GameMessage::BALL_POSITIONS;
const GameMessage_Type GameMessage::SCORE;
const GameMessage_Type GameMessage::SERVER_RELEASE_CONTROL;
const GameMessage_Type GameMessage::CLIENT_HIT;
const GameMessage_Type GameMessage::Type_MIN;
const GameMessage_Type GameMessage::Type_MAX;
const int GameMessage::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int GameMessage::kBallPositionsFieldNumber;
const int GameMessage::kScoreFieldNumber;
const int GameMessage::kCientHitFieldNumber;
#endif  // !_MSC_VER

GameMessage::GameMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GameMessage::InitAsDefaultInstance() {
  ball_positions_ = const_cast< ::BallPositions*>(&::BallPositions::default_instance());
  score_ = const_cast< ::Score*>(&::Score::default_instance());
  cienthit_ = const_cast< ::HitInfo*>(&::HitInfo::default_instance());
}

GameMessage::GameMessage(const GameMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GameMessage::SharedCtor() {
  _cached_size_ = 0;
  ball_positions_ = NULL;
  score_ = NULL;
  cienthit_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameMessage::~GameMessage() {
  SharedDtor();
}

void GameMessage::SharedDtor() {
  if (this != default_instance_) {
    delete ball_positions_;
    delete score_;
    delete cienthit_;
  }
}

void GameMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameMessage_descriptor_;
}

const GameMessage& GameMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameMessage_2eproto();
  return *default_instance_;
}

GameMessage* GameMessage::default_instance_ = NULL;

GameMessage* GameMessage::New() const {
  return new GameMessage;
}

void GameMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ball_positions()) {
      if (ball_positions_ != NULL) ball_positions_->::BallPositions::Clear();
    }
    if (has_score()) {
      if (score_ != NULL) score_->::Score::Clear();
    }
    if (has_cienthit()) {
      if (cienthit_ != NULL) cienthit_->::HitInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .BallPositions ball_positions = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ball_positions()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_score;
        break;
      }

      // optional .Score score = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_score:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_score()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_cientHit;
        break;
      }

      // optional .HitInfo cientHit = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cientHit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cienthit()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GameMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .BallPositions ball_positions = 1;
  if (has_ball_positions()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ball_positions(), output);
  }

  // optional .Score score = 2;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->score(), output);
  }

  // optional .HitInfo cientHit = 3;
  if (has_cienthit()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->cienthit(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GameMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .BallPositions ball_positions = 1;
  if (has_ball_positions()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ball_positions(), target);
  }

  // optional .Score score = 2;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->score(), target);
  }

  // optional .HitInfo cientHit = 3;
  if (has_cienthit()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->cienthit(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GameMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .BallPositions ball_positions = 1;
    if (has_ball_positions()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ball_positions());
    }

    // optional .Score score = 2;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->score());
    }

    // optional .HitInfo cientHit = 3;
    if (has_cienthit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cienthit());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameMessage::MergeFrom(const GameMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ball_positions()) {
      mutable_ball_positions()->::BallPositions::MergeFrom(from.ball_positions());
    }
    if (from.has_score()) {
      mutable_score()->::Score::MergeFrom(from.score());
    }
    if (from.has_cienthit()) {
      mutable_cienthit()->::HitInfo::MergeFrom(from.cienthit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameMessage::CopyFrom(const GameMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameMessage::IsInitialized() const {

  if (has_ball_positions()) {
    if (!this->ball_positions().IsInitialized()) return false;
  }
  if (has_score()) {
    if (!this->score().IsInitialized()) return false;
  }
  if (has_cienthit()) {
    if (!this->cienthit().IsInitialized()) return false;
  }
  return true;
}

void GameMessage::Swap(GameMessage* other) {
  if (other != this) {
    std::swap(ball_positions_, other->ball_positions_);
    std::swap(score_, other->score_);
    std::swap(cienthit_, other->cienthit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameMessage_descriptor_;
  metadata.reflection = GameMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Vector3f::kXFieldNumber;
const int Vector3f::kYFieldNumber;
const int Vector3f::kZFieldNumber;
#endif  // !_MSC_VER

Vector3f::Vector3f()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Vector3f::InitAsDefaultInstance() {
}

Vector3f::Vector3f(const Vector3f& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Vector3f::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Vector3f::~Vector3f() {
  SharedDtor();
}

void Vector3f::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Vector3f::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Vector3f::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Vector3f_descriptor_;
}

const Vector3f& Vector3f::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameMessage_2eproto();
  return *default_instance_;
}

Vector3f* Vector3f::default_instance_ = NULL;

Vector3f* Vector3f::New() const {
  return new Vector3f;
}

void Vector3f::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
    z_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Vector3f::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // required float y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_z;
        break;
      }

      // required float z = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Vector3f::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // required float y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // required float z = 3;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Vector3f::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // required float y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // required float z = 3;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Vector3f::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float x = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // required float y = 2;
    if (has_y()) {
      total_size += 1 + 4;
    }

    // required float z = 3;
    if (has_z()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vector3f::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Vector3f* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Vector3f*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Vector3f::MergeFrom(const Vector3f& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Vector3f::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vector3f::CopyFrom(const Vector3f& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector3f::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Vector3f::Swap(Vector3f* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Vector3f::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Vector3f_descriptor_;
  metadata.reflection = Vector3f_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BallPositions::kBallsFieldNumber;
#endif  // !_MSC_VER

BallPositions::BallPositions()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BallPositions::InitAsDefaultInstance() {
}

BallPositions::BallPositions(const BallPositions& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BallPositions::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BallPositions::~BallPositions() {
  SharedDtor();
}

void BallPositions::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BallPositions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BallPositions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BallPositions_descriptor_;
}

const BallPositions& BallPositions::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameMessage_2eproto();
  return *default_instance_;
}

BallPositions* BallPositions::default_instance_ = NULL;

BallPositions* BallPositions::New() const {
  return new BallPositions;
}

void BallPositions::Clear() {
  balls_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BallPositions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Vector3f balls = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_balls:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_balls()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_balls;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BallPositions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Vector3f balls = 1;
  for (int i = 0; i < this->balls_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->balls(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BallPositions::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Vector3f balls = 1;
  for (int i = 0; i < this->balls_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->balls(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BallPositions::ByteSize() const {
  int total_size = 0;

  // repeated .Vector3f balls = 1;
  total_size += 1 * this->balls_size();
  for (int i = 0; i < this->balls_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->balls(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BallPositions::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BallPositions* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BallPositions*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BallPositions::MergeFrom(const BallPositions& from) {
  GOOGLE_CHECK_NE(&from, this);
  balls_.MergeFrom(from.balls_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BallPositions::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BallPositions::CopyFrom(const BallPositions& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BallPositions::IsInitialized() const {

  for (int i = 0; i < balls_size(); i++) {
    if (!this->balls(i).IsInitialized()) return false;
  }
  return true;
}

void BallPositions::Swap(BallPositions* other) {
  if (other != this) {
    balls_.Swap(&other->balls_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BallPositions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BallPositions_descriptor_;
  metadata.reflection = BallPositions_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Score::kHostScoreFieldNumber;
const int Score::kClientScoreFieldNumber;
#endif  // !_MSC_VER

Score::Score()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Score::InitAsDefaultInstance() {
}

Score::Score(const Score& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Score::SharedCtor() {
  _cached_size_ = 0;
  host_score_ = 0;
  client_score_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Score::~Score() {
  SharedDtor();
}

void Score::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Score::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Score::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Score_descriptor_;
}

const Score& Score::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameMessage_2eproto();
  return *default_instance_;
}

Score* Score::default_instance_ = NULL;

Score* Score::New() const {
  return new Score;
}

void Score::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    host_score_ = 0;
    client_score_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Score::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float host_score = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &host_score_)));
          set_has_host_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_client_score;
        break;
      }

      // required float client_score = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_client_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &client_score_)));
          set_has_client_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Score::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float host_score = 1;
  if (has_host_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->host_score(), output);
  }

  // required float client_score = 2;
  if (has_client_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->client_score(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Score::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float host_score = 1;
  if (has_host_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->host_score(), target);
  }

  // required float client_score = 2;
  if (has_client_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->client_score(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Score::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float host_score = 1;
    if (has_host_score()) {
      total_size += 1 + 4;
    }

    // required float client_score = 2;
    if (has_client_score()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Score::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Score* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Score*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Score::MergeFrom(const Score& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_host_score()) {
      set_host_score(from.host_score());
    }
    if (from.has_client_score()) {
      set_client_score(from.client_score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Score::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Score::CopyFrom(const Score& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Score::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Score::Swap(Score* other) {
  if (other != this) {
    std::swap(host_score_, other->host_score_);
    std::swap(client_score_, other->client_score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Score::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Score_descriptor_;
  metadata.reflection = Score_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* HitInfo_Strength_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HitInfo_Strength_descriptor_;
}
bool HitInfo_Strength_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const HitInfo_Strength HitInfo::LOW;
const HitInfo_Strength HitInfo::MEDIUM;
const HitInfo_Strength HitInfo::HIGH;
const HitInfo_Strength HitInfo::Strength_MIN;
const HitInfo_Strength HitInfo::Strength_MAX;
const int HitInfo::Strength_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int HitInfo::kStrengthFieldNumber;
const int HitInfo::kDirectionFieldNumber;
#endif  // !_MSC_VER

HitInfo::HitInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HitInfo::InitAsDefaultInstance() {
  direction_ = const_cast< ::Vector3f*>(&::Vector3f::default_instance());
}

HitInfo::HitInfo(const HitInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HitInfo::SharedCtor() {
  _cached_size_ = 0;
  strength_ = 1;
  direction_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HitInfo::~HitInfo() {
  SharedDtor();
}

void HitInfo::SharedDtor() {
  if (this != default_instance_) {
    delete direction_;
  }
}

void HitInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HitInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HitInfo_descriptor_;
}

const HitInfo& HitInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameMessage_2eproto();
  return *default_instance_;
}

HitInfo* HitInfo::default_instance_ = NULL;

HitInfo* HitInfo::New() const {
  return new HitInfo;
}

void HitInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    strength_ = 1;
    if (has_direction()) {
      if (direction_ != NULL) direction_->::Vector3f::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HitInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .HitInfo.Strength strength = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::HitInfo_Strength_IsValid(value)) {
            set_strength(static_cast< ::HitInfo_Strength >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_direction;
        break;
      }

      // required .Vector3f direction = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_direction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_direction()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HitInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .HitInfo.Strength strength = 1;
  if (has_strength()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->strength(), output);
  }

  // required .Vector3f direction = 2;
  if (has_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->direction(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HitInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .HitInfo.Strength strength = 1;
  if (has_strength()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->strength(), target);
  }

  // required .Vector3f direction = 2;
  if (has_direction()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->direction(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HitInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .HitInfo.Strength strength = 1;
    if (has_strength()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->strength());
    }

    // required .Vector3f direction = 2;
    if (has_direction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->direction());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HitInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HitInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HitInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HitInfo::MergeFrom(const HitInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_strength()) {
      set_strength(from.strength());
    }
    if (from.has_direction()) {
      mutable_direction()->::Vector3f::MergeFrom(from.direction());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HitInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HitInfo::CopyFrom(const HitInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HitInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_direction()) {
    if (!this->direction().IsInitialized()) return false;
  }
  return true;
}

void HitInfo::Swap(HitInfo* other) {
  if (other != this) {
    std::swap(strength_, other->strength_);
    std::swap(direction_, other->direction_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HitInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HitInfo_descriptor_;
  metadata.reflection = HitInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
